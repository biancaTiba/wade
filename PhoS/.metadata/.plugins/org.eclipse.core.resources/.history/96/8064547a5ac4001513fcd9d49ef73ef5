package phobias;

import java.util.ArrayList;
import java.util.HashMap;

import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

import org.json.JSONException;

import com.alibaba.fastjson.JSON;
import com.hp.hpl.jena.query.Query;
import com.hp.hpl.jena.query.QueryExecution;
import com.hp.hpl.jena.query.QueryExecutionFactory;
import com.hp.hpl.jena.query.QueryFactory;
import com.hp.hpl.jena.query.QuerySolution;
import com.hp.hpl.jena.query.ResultSet;

import login.LoginManager;

@Path("/")
public class PhobiasContext {
	enum Activities {
		VISIT,
		WATCH,
		PRACTICE
	}
	
	public static String getActivityString(Activities activity){
		switch (activity) {
		case VISIT:
			return "visit";
		case PRACTICE:
			return "practice sport";
		case WATCH:
			return "watch a movie";
		default: return activity.toString();
		}
	}
	
	@GET
	@Path("getActivities")
	@Produces(MediaType.APPLICATION_JSON)
	public Response getActivities(@QueryParam("token") String token) throws JSONException {
		
		if (token == null || !LoginManager.checkAuthToken(token)) {
    		return Response.status(401).build();
    	}
        
        HashMap<String,String> activities = new HashMap<String,String>();
        activities.put(Activities.WATCH.toString(), getActivityString(Activities.WATCH));
		activities.put(Activities.VISIT.toString(), getActivityString(Activities.VISIT));
		activities.put(Activities.PRACTICE.toString(), getActivityString(Activities.PRACTICE));
		
        String jsonObj = JSON.toJSONString(activities);
        System.out.println(jsonObj.toString()); 
		return Response.status(200).entity(jsonObj).build();
	}
	
	@GET
	@Path("getSubactivities")
	@Produces(MediaType.APPLICATION_JSON)
	public Response getSubactivities(@QueryParam("activity") String activity, @QueryParam("token") String token) throws JSONException {
		
		if (token == null || !LoginManager.checkAuthToken(token)) {
    		return Response.status(401).build();
    	}
        Activities a = Activities.valueOf(activity);
        String responseBody = "";
        switch(a) {
        case VISIT:break;
			// "visit";
		case PRACTICE:break;
			//return "practice sport";
		case WATCH:
			responseBody = getMovies();
		default:break; //return activity.toString();
        }
		
       // String jsonObj = JSON.toJSONString(responseBody);
       // System.out.println(jsonObj); 
		return Response.status(200).entity(responseBody).build();
	}
	
	private String getMovies(){
		String queryString = "PREFIX dbp: <http://dbpedia.org/property/>\n" +
                "PREFIX  dct: <http://purl.org/dc/terms/>\n" +
                "PREFIX dbc: <http://dbpedia.org/resource/Category:>\n" +
                "PREFIX  rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n" +
                "\n" +
                "SELECT DISTINCT ?genre ?name (count(?movie) AS ?c) WHERE { "+
                "  ?genre dct:subject dbc:Film_genres.\n" +
                "  ?genre rdfs:label ?name.\n" +
                "  ?movie dbp:genre ?genre.\n" +
                "  FILTER (langMatches(lang(?name), \"en\")) \n" +
                " }GROUP BY ?genre ?name ORDER BY DESC(?c) LIMIT 40\n";
  
        Query query = QueryFactory.create(queryString);
        QueryExecution qExe = QueryExecutionFactory.sparqlService( "http://dbpedia.org/sparql", query );
        ResultSet results = qExe.execSelect();
        
        ArrayList<HashMap<String, String>> movies = new ArrayList<HashMap<String, String>>();
		while (results.hasNext()) {
			QuerySolution result = results.next();
			String name = result.getLiteral("name").getString();
			String genre = result.getResource("genre").getURI().toString();
			HashMap<String, String> parsedMovie = new HashMap<>();
			parsedMovie.put("name", name);
			parsedMovie.put("genre", genre);
			movies.add(parsedMovie);			
		}
		
        String jsonObj = JSON.toJSONString(movies);
		return jsonObj;
	  }
	
	private String getSports(){
		String queryString = "PREFIX skos: <http://www.w3.org/2004/02/skos/core#>\n" +
                "PREFIX dbc: <http://dbpedia.org/resource/Category:>\n" +
                "PREFIX  rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n" +
                "\n" +
                "SELECT DISTINCT ?sportType ?sportName WHERE { "+
                "  ?genre dct:subject dbc:Film_genres.\n" +
                "  ?genre rdfs:label ?name.\n" +
                "  ?movie dbp:genre ?genre.\n" +
                "  FILTER (langMatches(lang(?name), \"en\")) \n" +
                " }GROUP BY ?genre ?name ORDER BY DESC(?c) LIMIT 40\n";
  
        Query query = QueryFactory.create(queryString);
        QueryExecution qExe = QueryExecutionFactory.sparqlService( "http://dbpedia.org/sparql", query );
        ResultSet results = qExe.execSelect();
        
        ArrayList<HashMap<String, String>> movies = new ArrayList<HashMap<String, String>>();
		while (results.hasNext()) {
			QuerySolution result = results.next();
			String name = result.getLiteral("name").getString();
			String genre = result.getResource("genre").getURI().toString();
			HashMap<String, String> parsedMovie = new HashMap<>();
			parsedMovie.put("name", name);
			parsedMovie.put("genre", genre);
			movies.add(parsedMovie);			
		}
		
        String jsonObj = JSON.toJSONString(movies);
		return jsonObj;
	  }

}

