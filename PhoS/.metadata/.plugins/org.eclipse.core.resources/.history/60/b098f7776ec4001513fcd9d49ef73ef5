package login;

import java.util.ArrayList;
import java.util.HashMap;

import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

import org.json.JSONException;

import com.alibaba.fastjson.JSON;
import com.hp.hpl.jena.query.Query;
import com.hp.hpl.jena.query.QueryExecution;
import com.hp.hpl.jena.query.QueryExecutionFactory;
import com.hp.hpl.jena.query.QueryFactory;
import com.hp.hpl.jena.query.QuerySolution;
import com.hp.hpl.jena.query.ResultSet;

public class UserManager {

	@GET
	@Path("/userDetails")
	@Produces(MediaType.APPLICATION_JSON)
	public Response getUserPhobias(@QueryParam("token") String token) throws JSONException {
		
		if (token == null || !LoginManager.checkAuthToken(token)) {
    		return Response.status(401).build();
    	}

		StringBuilder queryString = new StringBuilder();
		String s2 = "PREFIX  dbo: <http://dbpedia.org/ontology/>\n" +
                "PREFIX  rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n" +
                "PREFIX foaf: <http://xmlns.com/foaf/0.1/>" +
                "PREFIX dbr: <http://dbpedia.org/resource/>" +
                "\n" +
                "SELECT ?title ?longDesc ?photo " +
                "WHERE\n {";
		queryString.append(s2);
		for (int i=0; i<userPhobias.size()-1; i++) {
			s2 = phobiaTemplate(userPhobias.get(i));
			queryString.append(s2);
			queryString.append(" UNION ");
		}
		queryString.append(phobiaTemplate(userPhobias.get(userPhobias.size()-1)));
		queryString.append("}");

		Query query = QueryFactory.create(queryString.toString());
        QueryExecution qExe = QueryExecutionFactory.sparqlService( "http://dbpedia.org/sparql", query );
        ResultSet results = qExe.execSelect();
        
        ArrayList<HashMap<String, String>> phobias = new ArrayList<HashMap<String, String>>();
        int index = 0;
		while (results.hasNext()) {
			QuerySolution result = results.next();
			String title = result.getLiteral("title").getString();
			String longDesc = result.getLiteral("longDesc").getString();
			//String photo = results.next().getLiteral("photo").getString();
			HashMap<String, String> parsedPhobia = new HashMap<>();
			parsedPhobia.put("resource", userPhobias.get(index));
			parsedPhobia.put("title", title);
			parsedPhobia.put("longDesc", longDesc);
			parsedPhobia.put("photo", "");
			phobias.add(parsedPhobia);			
			index++;
		}
		
        String jsonObj = JSON.toJSONString(phobias);
        System.out.println(jsonObj.toString()); 
		return Response.status(200).entity(jsonObj).build();
	  }
	
}
